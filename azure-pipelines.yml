pool:
  vmImage: 'windows-2022'

variables:
  Prerelease: 'ci'
  buildId: "$(Build.BuildId)"
  buildProjects: '**/src/**/*.csproj'

steps:
# Print buildId
- script: |
    echo "BuildId = $(buildId)"
  displayName: 'Print buildId'

#- task: DotNetCoreInstaller@0
#  inputs:
 #   version: '2.2.401'

# Build source, tests and run tests for netcoreapp2.2 (with coverage)
#- script: |
#    dotnet test ./tests/GraphQL.EntityFrameworkCore.DynamicLinq.Tests/GraphQL.EntityFrameworkCore.DynamicLinq.Tests.csproj --configuration Debug --logger trx /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
#  displayName: 'Build source, tests and run tests (with coverage)'

#- task: whitesource.ws-bolt.bolt.wss.WhiteSource Bolt@19
#  displayName: 'WhiteSource Bolt'

# Upload coverage to codecov.io
#- script: |
#    %USERPROFILE%\.nuget\packages\codecov\1.7.1\tools\codecov.exe -f "./tests/GraphQL.EntityFrameworkCore.DynamicLinq.Tests/coverage.opencover.xml" -t $(CODECOV_TOKEN)
#  displayName: Upload coverage to codecov.io

#- task: PublishTestResults@2
#  inputs:
#    testRunner: VSTest
#    testResultsFiles: '**/*.trx'

# Based on https://whereslou.com/2018/09/versioning-and-publishing-nuget-packages-automatically-using-azure-devops-pipelines/
- task: DotNetCoreCLI@2
  displayName: Build Release
  inputs:
    command: 'build'
    arguments: /p:Configuration=Release # https://github.com/MicrosoftDocs/vsts-docs/issues/1976
    projects: $(buildProjects)

- task: DotNetCoreCLI@2
  displayName: Pack
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest')) # Do not run for PullRequests
  inputs:
    command: pack
    configuration: 'Release'
    packagesToPack: $(buildProjects)
    nobuild: true
    packDirectory: '$(Build.ArtifactStagingDirectory)/packages'
    verbosityPack: 'normal'

- task: PublishBuildArtifacts@1
  displayName: Publish Artifacts
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest')) # Do not run for PullRequests
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'

- task: DotNetCoreCLI@2
  displayName: Push to MyGet
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest')) # Do not run for PullRequests
  inputs:
    command: custom
    custom: nuget
    arguments: push $(Build.ArtifactStagingDirectory)\packages\*.nupkg -n true --source https://www.myget.org/F/system_text_json_enumextensions/api/v3/index.json -k $(MyGetKey)